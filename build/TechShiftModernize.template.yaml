Resources:
  LogGroupF5B46931:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /cdk/fargate
      RetentionInDays: 30
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: TechShiftModernize/LogGroup/Resource
  MyVpcF9F0CA6F:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/Resource
  MyVpcPublicSubnet1SubnetF6608456:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.0.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: ap-southeast-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc/PublicSubnet1
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet1/Subnet
  MyVpcPublicSubnet1RouteTableC46AB2F4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet1/RouteTable
  MyVpcPublicSubnet1RouteTableAssociation2ECEE1CB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet1RouteTableC46AB2F4
      SubnetId:
        Ref: MyVpcPublicSubnet1SubnetF6608456
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet1/RouteTableAssociation
  MyVpcPublicSubnet1DefaultRoute95FDF9EB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet1RouteTableC46AB2F4
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet1/DefaultRoute
  MyVpcPublicSubnet1EIP096967CB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet1/EIP
  MyVpcPublicSubnet1NATGatewayAD3400C1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet1EIP096967CB
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet1SubnetF6608456
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet1/NATGateway
  MyVpcPublicSubnet2Subnet492B6BFB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.64.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: ap-southeast-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc/PublicSubnet2
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet2/Subnet
  MyVpcPublicSubnet2RouteTable1DF17386:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet2/RouteTable
  MyVpcPublicSubnet2RouteTableAssociation227DE78D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet2RouteTable1DF17386
      SubnetId:
        Ref: MyVpcPublicSubnet2Subnet492B6BFB
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet2/RouteTableAssociation
  MyVpcPublicSubnet2DefaultRoute052936F6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet2RouteTable1DF17386
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet2/DefaultRoute
  MyVpcPublicSubnet2EIP8CCBA239:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet2/EIP
  MyVpcPublicSubnet2NATGateway91BFBEC9:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet2EIP8CCBA239
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet2Subnet492B6BFB
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PublicSubnet2/NATGateway
  MyVpcPrivateSubnet1Subnet5057CF7E:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.128.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: ap-southeast-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc/PrivateSubnet1
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PrivateSubnet1/Subnet
  MyVpcPrivateSubnet1RouteTable8819E6E2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PrivateSubnet1/RouteTable
  MyVpcPrivateSubnet1RouteTableAssociation56D38C7E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet1RouteTable8819E6E2
      SubnetId:
        Ref: MyVpcPrivateSubnet1Subnet5057CF7E
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PrivateSubnet1/RouteTableAssociation
  MyVpcPrivateSubnet1DefaultRouteA8CDE2FA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet1RouteTable8819E6E2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet1NATGatewayAD3400C1
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PrivateSubnet1/DefaultRoute
  MyVpcPrivateSubnet2Subnet0040C983:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.192.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: ap-southeast-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc/PrivateSubnet2
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PrivateSubnet2/Subnet
  MyVpcPrivateSubnet2RouteTableCEDCEECE:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PrivateSubnet2/RouteTable
  MyVpcPrivateSubnet2RouteTableAssociation86A610DA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet2RouteTableCEDCEECE
      SubnetId:
        Ref: MyVpcPrivateSubnet2Subnet0040C983
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PrivateSubnet2/RouteTableAssociation
  MyVpcPrivateSubnet2DefaultRoute9CE96294:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet2RouteTableCEDCEECE
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet2NATGateway91BFBEC9
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/PrivateSubnet2/DefaultRoute
  MyVpcIGW5C4A4F63:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TechShiftModernize/MyVpc
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/IGW
  MyVpcVPCGW488ACE0D:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      InternetGatewayId:
        Ref: MyVpcIGW5C4A4F63
    Metadata:
      aws:cdk:path: TechShiftModernize/MyVpc/VPCGW
  MyCfnDns:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: ckd-ecslab
      Vpc:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: TechShiftModernize/MyCfnDns
  MyCfnService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: "60"
            Type: A
        NamespaceId:
          Fn::GetAtt:
            - MyCfnDns
            - Id
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: ckd-mysql-service
    Metadata:
      aws:cdk:path: TechShiftModernize/MyCfnService
  MyCluster4C1BA579:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: TechShiftModernize/MyCluster/Resource
  MySqlTaskDefTaskRole77A5F3FA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: TechShiftModernize/MySqlTaskDef/TaskRole/Resource
  MySqlTaskDefFBD4D6EA:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: MYSQL_ROOT_PASSWORD
              Value: password
          Essential: true
          Image: mysql:5.7
          Links:
            []
          LinuxParameters:
            Capabilities:
              Add:
                []
              Drop:
                []
            Devices:
              []
            Tmpfs:
              []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroupF5B46931
              awslogs-stream-prefix: mysql
              awslogs-region:
                Ref: AWS::Region
          MountPoints:
            []
          Name: MySql
          PortMappings:
            - ContainerPort: 3306
              HostPort: 3306
              Protocol: tcp
          Ulimits:
            []
          VolumesFrom:
            []
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - MySqlTaskDefExecutionRole3674421C
          - Arn
      Family: MySqlTask
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - MySqlTaskDefTaskRole77A5F3FA
          - Arn
      Volumes:
        []
    Metadata:
      aws:cdk:path: TechShiftModernize/MySqlTaskDef/Resource
  MySqlTaskDefExecutionRole3674421C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: TechShiftModernize/MySqlTaskDef/ExecutionRole/Resource
  MySqlTaskDefExecutionRoleDefaultPolicyAFEAEF9D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - LogGroupF5B46931
                - Arn
        Version: "2012-10-17"
      PolicyName: MySqlTaskDefExecutionRoleDefaultPolicyAFEAEF9D
      Roles:
        - Ref: MySqlTaskDefExecutionRole3674421C
    Metadata:
      aws:cdk:path: TechShiftModernize/MySqlTaskDef/ExecutionRole/DefaultPolicy/Resource
  MySqlService86DE7DA9:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: MySqlTaskDefFBD4D6EA
      Cluster:
        Ref: MyCluster4C1BA579
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        []
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - MySqlServiceSecurityGroup87F24831
                - GroupId
          Subnets:
            - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
            - Ref: MyVpcPrivateSubnet2Subnet0040C983
      ServiceName: MySql
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - MyCfnService
              - Arn
    Metadata:
      aws:cdk:path: TechShiftModernize/MySqlService/Service
  MySqlServiceSecurityGroup87F24831:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: TechShiftModernize/MySqlService/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:3306
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: TechShiftModernize/MySqlService/SecurityGroup/Resource
  WordpressTaskDefTaskRole8CB1FAAA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: TechShiftModernize/WordpressTaskDef/TaskRole/Resource
  WordpressTaskDefE60F8253:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: WORDPRESS_DB_HOST
              Value: cdk-mysql-service.cdk-ecslab
            - Name: WORDPRESS_DB_PASSWORD
              Value: password
          Essential: true
          Image: wordpress:4.6
          Links:
            []
          LinuxParameters:
            Capabilities:
              Add:
                []
              Drop:
                []
            Devices:
              []
            Tmpfs:
              []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroupF5B46931
              awslogs-stream-prefix: wordpress
              awslogs-region:
                Ref: AWS::Region
          MountPoints:
            []
          Name: Wordpress
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Ulimits:
            []
          VolumesFrom:
            []
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - WordpressTaskDefExecutionRole62AF2843
          - Arn
      Family: WordpressTask
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - WordpressTaskDefTaskRole8CB1FAAA
          - Arn
      Volumes:
        []
    Metadata:
      aws:cdk:path: TechShiftModernize/WordpressTaskDef/Resource
  WordpressTaskDefExecutionRole62AF2843:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: TechShiftModernize/WordpressTaskDef/ExecutionRole/Resource
  WordpressTaskDefExecutionRoleDefaultPolicyE277A48D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - LogGroupF5B46931
                - Arn
        Version: "2012-10-17"
      PolicyName: WordpressTaskDefExecutionRoleDefaultPolicyE277A48D
      Roles:
        - Ref: WordpressTaskDefExecutionRole62AF2843
    Metadata:
      aws:cdk:path: TechShiftModernize/WordpressTaskDef/ExecutionRole/DefaultPolicy/Resource
  WordpressServiceEAED209E:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: WordpressTaskDefE60F8253
      Cluster:
        Ref: MyCluster4C1BA579
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: Wordpress
          ContainerPort: 80
          TargetGroupArn:
            Ref: LBListenerECSGroup1D445DF5
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - WordpressServiceSecurityGroup69B6BE6D
                - GroupId
          Subnets:
            - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
            - Ref: MyVpcPrivateSubnet2Subnet0040C983
      ServiceName: Wordpress
    DependsOn:
      - LBListenerECSGroup1D445DF5
      - LBListener49E825B4
    Metadata:
      aws:cdk:path: TechShiftModernize/WordpressService/Service
  WordpressServiceSecurityGroup69B6BE6D:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: TechShiftModernize/WordpressService/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        []
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: TechShiftModernize/WordpressService/SecurityGroup/Resource
  WordpressServiceSecurityGroupfromTechShiftModernizeLBSecurityGroupFDA228B380F0DB7EEF:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - WordpressServiceSecurityGroup69B6BE6D
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - LBSecurityGroup8A41EA2B
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: TechShiftModernize/WordpressService/SecurityGroup/from
        TechShiftModernizeLBSecurityGroupFDA228B3:80
  LB8A12904C:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        []
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - LBSecurityGroup8A41EA2B
            - GroupId
      Subnets:
        - Ref: MyVpcPublicSubnet1SubnetF6608456
        - Ref: MyVpcPublicSubnet2Subnet492B6BFB
      Type: application
    DependsOn:
      - MyVpcPublicSubnet1DefaultRoute95FDF9EB
      - MyVpcPublicSubnet2DefaultRoute052936F6
    Metadata:
      aws:cdk:path: TechShiftModernize/LB/Resource
  LBSecurityGroup8A41EA2B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB TechShiftModernizeLB0E677A71
      SecurityGroupEgress:
        []
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: TechShiftModernize/LB/SecurityGroup/Resource
  LBSecurityGrouptoTechShiftModernizeWordpressServiceSecurityGroupC0EB47A380763BD71F:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - LBSecurityGroup8A41EA2B
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - WordpressServiceSecurityGroup69B6BE6D
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: TechShiftModernize/LB/SecurityGroup/to
        TechShiftModernizeWordpressServiceSecurityGroupC0EB47A3:80
  LBListener49E825B4:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: LBListenerECSGroup1D445DF5
          Type: forward
      LoadBalancerArn:
        Ref: LB8A12904C
      Port: 80
      Protocol: HTTP
      Certificates:
        []
    Metadata:
      aws:cdk:path: TechShiftModernize/LB/Listener/Resource
  LBListenerECSGroup1D445DF5:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: MyVpcF9F0CA6F
      TargetGroupAttributes:
        []
      Targets:
        []
      TargetType: ip
    Metadata:
      aws:cdk:path: TechShiftModernize/LB/Listener/ECSGroup/Resource
  TargetGroup5xx43EFCD6E:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Threshold: 1
      Dimensions:
        - Name: TargetGroup
          Value:
            Fn::GetAtt:
              - LBListenerECSGroup1D445DF5
              - TargetGroupFullName
        - Name: LoadBalancer
          Value:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 1
                    - Fn::Split:
                        - /
                        - Ref: LBListener49E825B4
                - /
                - Fn::Select:
                    - 2
                    - Fn::Split:
                        - /
                        - Ref: LBListener49E825B4
                - /
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - /
                        - Ref: LBListener49E825B4
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 300
      Statistic: Sum
    Metadata:
      aws:cdk:path: TechShiftModernize/TargetGroup5xx/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=0.22.0,@aws-cdk/assets=0.24.1,@aws-cdk/assets-docker=0.24.1,@aws-cdk/aws-applicationautoscaling=0.24.1,@aws-cdk/aws-autoscaling=0.24.1,@aws-cdk/aws-autoscaling-common=0.24.1,@aws-cdk/aws-certificatemanager=0.24.1,@aws-cdk/aws-cloudformation=0.24.1,@aws-cdk/aws-cloudwatch=0.24.1,@aws-cdk/aws-codedeploy-api=0.24.1,@aws-cdk/aws-codepipeline-api=0.24.1,@aws-cdk/aws-ec2=0.24.1,@aws-cdk/aws-ecr=0.24.1,@aws-cdk/aws-ecs=0.24.1,@aws-cdk/aws-elasticloadbalancingv2=0.24.1,@aws-cdk/aws-events=0.24.1,@aws-cdk/aws-iam=0.24.1,@aws-cdk/aws-kms=0.24.1,@aws-cdk/aws-lambda=0.24.1,@aws-cdk/aws-logs=0.24.1,@aws-cdk/aws-route53=0.24.1,@aws-cdk/aws-s3=0.24.1,@aws-cdk/aws-s3-notifications=0.24.1,@aws-cdk/aws-servicediscovery=0.24.1,@aws-cdk/aws-sns=0.24.1,@aws-cdk/aws-sqs=0.24.1,@aws-cdk/cdk=0.24.1,@aws-cdk/cx-api=0.24.1,jsii-runtime=node.js/v11.4.0
Outputs:
  LoadBalancerDNS:
    Value:
      Fn::GetAtt:
        - LB8A12904C
        - DNSName
